Azure Kubernetes Service is the quickest path from zero to Kubernetes on Azure. This new service features an Azure-hosted control plane, automated upgrades, self-healing, easy scaling, and a simple user experience for both developers and cluster operators. With AKS, customers get the benefits of open source Kubernetes without complexity or operational overhead.
To help you get started with AKS, the managed Kubernetes service is free. You only pay for the VMs in your cluster, and any infrastructure resources consumed like storage and networking. This means on Azure, you will pay nothing for the management of your Kubernetes cluster.
Creating an AKS cluster typically takes a few minutes. Once complete, you can access and manage your cluster through "az aks" and "kubectl".

STEPS

	1. Create resource --> kubernetes  service(layout similar to creating a vm) --> create
	2. Go to resource -->
	3. CLI -->create -->
		-->kubectl version
	4. To connect to the cluster, follow the cmds..(u can use kubectl. Minikube, kubeadm)
		--> az aks get credentials resorce group <resource group name> --name <myAKSCluster> (cmd downloads the credentials and configure kubectl to connect to cluster) 
		
		--> kubectl get nodes   to get the nodes 
		
		now we have to create a yaml file to run the application
		
		-->nano azure-vote.yaml
------------------------------------------------------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: mcr.microsoft.com/oss/bitnami/redis:6.0.8
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: mcr.microsoft.com/azuredocs/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: azure-vote-front

-------------------------------------------------------------------------------------------------

Now we just have to use the file to deploy the application. On top of the pod, the Deployment API will work.

--> kubectl apply -f azure-vote.yaml

To get the pods(the containers should be running to be able to watch the front end service ) 

--> kubectl get pods

To watch the services..(ie. To watch on the browser)

--> kubectl get services azure-vote-front --watch

